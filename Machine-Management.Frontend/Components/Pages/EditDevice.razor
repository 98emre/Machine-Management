@page "/editDevice"
@page "/editDevice/{id:int}"

@inject NavigationManager NavigationManager
@inject IDeviceService DeviceService
@rendermode InteractiveServer

<PageTitle>Edit Device</PageTitle>

<h3>Edit Device</h3>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (deviceNotFound)
{
    <p><em>Device not found</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@Device" FormName="editDevice" OnValidSubmit="HandleSubmit">

                <div class="mb-3">
                    <label for="name" class="form-label">Name: </label>
                    <InputText id="name" @bind-Value="Device.Name" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="status" class="form-label">Status: </label>
                    <InputSelect id="status" @bind-Value="Device.Status" class="form-select">
                        <option value="">Select a status</option>
                        <option value="true">True</option>
                        <option value="false">False</option>
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label for="date" class="form-label">Date: </label>
                    <InputDate id="date" @bind-Value="Device.Date" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
                <a href="/dashboard" role="button" class="btn btn-secondary">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    private bool deviceNotFound = false;
    private bool loading = true;

    [SupplyParameterFromForm]
    private Device? Device { get; set; }

    private DevicePost? DevicePost { get; set; }


    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Device != null)
        {
            return;
        }

        if (Id != null)
        {
            try
            {
                Device = await DeviceService.GetDeviceAsync(Id.Value);

                if (Device == null)
                {
                    deviceNotFound = true;
                }
            }
            catch (ArgumentNullException)
            {
                deviceNotFound = true;
            }
        }

        else
        {
            Device = new Device()
            {
               Name = string.Empty,
               Date = DateOnly.FromDateTime(DateTime.UtcNow),
            };
        }

        loading = false;
    }

    private async Task HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(Device);

        try
        {
            if (Id == null)
            {
                DevicePost = new DevicePost()
                {
                    Name = Device.Name,
                    Date = Device.Date,
                    Status = Device.Status
                };

                await DeviceService.AddDeviceAsync(DevicePost);
                Console.WriteLine("Device added successfully.");
            }
            else
            {
                Device.Id = Id.Value;
                await DeviceService.UpdateDeviceAsync(Device);
                Console.WriteLine("Device updated successfully.");
            }

            NavigationManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred: {ex.Message}");
        }
    }
}
